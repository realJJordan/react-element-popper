{"version":3,"sources":["webpack://react-element-popper/./src/docs/multi_select.js","webpack://react-element-popper/./src/pages/multi-select.js"],"names":["translate","language","useState","values","setValues","values1","setValues1","title","description","className","code","jsx","MultiSelect","onChange","options","useClickOutside","isMenuOpen","setIsMenuOpen","ref","useRef","useEffect","document","addEventListener","handleClickOutside","removeEventListener","e","current","contains","target","mustSelectAll","length","containerClassName","element","onClick","popper","style","width","clientWidth","type","checked","map","option","index","text","value","key","includes","select","offsetY","filter","val","push","pageContext","doc"],"mappings":"sNAGe,SAAS,EAACA,EAAWC,GAAW,IAAD,GAChBC,cAAS,CAAC,IAAK,MAApCC,EADqC,KAC7BC,EAD6B,QAEdF,cAAS,CAAC,IAAK,MAAtCG,EAFqC,KAE5BC,EAF4B,KA4L5C,MAAO,CAxLa,CAClBC,MAAO,eACPC,YAAa,gCAEX,yBAAIR,EAAU,eACd,2BACE,wBAAMS,UAAU,gBAAhB,s1BAgDJC,KAAK,4SAWGV,EAAU,UAXd,yBAYIA,EAAU,UAZd,yBAaIA,EAAU,UAbd,yBAcIA,EAAU,UAdd,yBAeIA,EAAU,UAfd,yeAoCIA,EAAU,wBApCd,gWA+CYA,EAAU,cA/CtB,w3BAwFJW,IAAK,gBAACC,EAAD,CACHT,OAAQA,EACRU,SAAUT,EACVU,QAAS,CACP,CAAId,EAAU,UAAd,KAA6B,KAC7B,CAAIA,EAAU,UAAd,KAA6B,KAC7B,CAAIA,EAAU,UAAd,KAA6B,KAC7B,CAAIA,EAAU,UAAd,KAA6B,KAC7B,CAAIA,EAAU,UAAd,KAA6B,MAE/BA,UAAWA,KAIY,CACzBO,MAAO,uBACPC,YAAa,uBACbE,KAAK,2SAULC,IAAK,gBAACC,EAAD,CACHT,OAAQE,EACRQ,SAAUP,EACVQ,QAAS,CACP,CAAId,EAAU,UAAd,KAA6B,KAC7B,CAAIA,EAAU,UAAd,KAA6B,KAC7B,CAAIA,EAAU,UAAd,KAA6B,KAC7B,CAAIA,EAAU,UAAd,KAA6B,KAC7B,CAAIA,EAAU,UAAd,KAA6B,MAE/Be,iBAAe,EACff,UAAWA,MAUjB,SAASY,EAAT,GAAmG,IAAD,MAA3EE,eAA2E,MAAjE,GAAiE,MAA7DX,cAA6D,MAApD,GAAoD,EAAhDU,EAAgD,EAAhDA,SAAgD,IAAtCE,uBAAsC,SAAbf,EAAa,EAAbA,UAAa,GAC5DE,eAAS,GAAtCc,EADyF,KAC7EC,EAD6E,KAE1FC,GAAMC,eAEZC,gBAAU,WACR,GAAKL,EASL,OADAM,SAASC,iBAAiB,QAASC,GAC5B,kBAAMF,SAASG,oBAAoB,QAASD,IAPnD,SAASA,EAAmBE,GACtBP,EAAIQ,UAAYR,EAAIQ,QAAQC,SAASF,EAAEG,SACzCX,GAAc,MAMjB,CAACF,IAEJ,IAAMc,EAAgB1B,EAAO2B,SAAWhB,EAAQgB,OAEhD,OACE,gBAAC,IAAD,CACEZ,IAAKA,EACLa,mBAAmB,eACnBC,QACE,uBACEvB,UAAU,cACVwB,QAAS,kBAAMhB,GAAeD,KAE7BhB,EAAU,yBAGfkC,OAAQlB,GACN,uBAAKP,UAAU,UAAU0B,MAAO,CAAEC,OAAOlB,SAAA,UAAAA,EAAKQ,eAAL,eAAcW,cAAe,UACpE,yBAAO5B,UAAU,UACf,yBACE6B,KAAK,WACLC,SAAUV,EACVhB,SAqBZ,WAEIV,EADE0B,EACOf,EAAQ0B,KAAI,SAAAC,GAAM,OAAIA,EAAO,MAE7B,GAGP5B,GAAUA,EAASV,MA1Bf,4BAAOH,EAAU,gBAElBc,EAAQ0B,KAAI,WAAgBE,GAAhB,IAAEC,EAAF,KAAQC,EAAR,YACX,yBAAOnC,UAAU,SAASoC,IAAKH,GAC7B,yBACEJ,KAAK,WACLM,MAAOA,EACPL,QAASpC,EAAO2C,SAASF,GACzB/B,SAAUkC,IAEZ,4BAAOJ,QAKfK,QAAS,IAcb,SAASD,EAAOtB,GACd,IAAImB,EAAQnB,EAAEG,OAAOgB,MAEjBzC,EAAO2C,SAASF,GAClBzC,EAASA,EAAO8C,QAAO,SAAAC,GAAG,OAAIA,IAAQN,KAEtCzC,EAAOgD,KAAKP,GAGV/B,GAAUA,GAAS,OAAIV,KC9QhB,SAASS,EAAT,GAAuC,IAC9CX,EAD6C,EAAfmD,YACPnD,UAAY,KAEzC,OACE,gBAAC,IAAD,CAAQA,SAAUA,EAAUoD,IAAKA","file":"component---src-pages-multi-select-js-49ac762f39159f5ad431.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\"\nimport ElementPopper from \"../../../index\"\n\nexport default function (translate, language) {\n  const [values, setValues] = useState([\"1\", \"2\"])\n  const [values1, setValues1] = useState([\"1\", \"2\"])\n\n  const multiSelect = {\n    title: \"Multi Select\",\n    description: <>\n\n      <p>{translate(\"style.css:\")}</p>\n      <pre>\n        <code className=\"language-css\">\n          {\n            `.multi-select {\n  border-radius: 5px;\n  font-size: 15px;\n  min-width: 120px;\n  background-color: white;\n  box-sizing: border-box;\n}\n            \n.multi-select .placeholder {\n  border: 1px #ddd solid;\n  background-color: white;\n  border-radius: 5px;\n  height: 21px;\n  font-size: 13px;\n  color: rgb(37, 35, 35);\n  font-weight: 500;\n  cursor: pointer;\n  padding: 5px 20px;\n}\n            \n.multi-select .options {\n  border: 1px solid #ddd;\n  background: white;\n  color: black;\n  max-height: 300px;\n  overflow: auto;\n  border-radius: 2px;\n}\n            \n.multi-select .options .option {\n  display: block;\n  color: rgb(37, 35, 35);\n  font-weight: 500px;\n  font-size: 14px;\n  margin-top: 0;\n  padding-top: 2px;\n}\n            \n.multi-select .options .option:hover {\n  background-color: dodgerblue;\n  color: white;\n}`\n          }\n        </code>\n      </pre>\n    </>,\n    code: `import React, { useRef, useState } from \"react\"\nimport ElementPopper from \"react-element-popper\"\n\nexport default function App() {\n  const [values, setValues] = useState([\"1\", \"2\"])\n\n  return (\n    <MultiSelect\n      values={values}\n      onChange={setValues}\n      options={[\n        [\"${translate(\"option\")} 1\", \"1\"],\n        [\"${translate(\"option\")} 2\", \"2\"],\n        [\"${translate(\"option\")} 3\", \"3\"],\n        [\"${translate(\"option\")} 4\", \"4\"],\n        [\"${translate(\"option\")} 5\", \"5\"],\n      ]}\n    />\n  )\n}\n    \nfunction MultiSelect({ options = [], values = [], onChange }) {\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\n  const ref = useRef()\n\n  const mustSelectAll = values.length !== options.length\n    \n  return (\n    <ElementPopper\n      ref={ref}\n      containerClassName=\"multi-select\"\n      element={(\n        <div\n          className=\"placeholder\"\n          onClick={() => setIsMenuOpen(!isMenuOpen)}\n        >\n          ${translate(\"click here to select\")}\n        </div>\n      )}\n      popper={isMenuOpen && (\n        <div className=\"options\" style={{ width: ref?.current?.clientWidth || \"100px\" }}>\n          <label className=\"option\">\n            <input\n              type=\"checkbox\"\n              checked={!mustSelectAll}\n              onChange={selectAll}\n            />\n            <span>${translate(\"select all\")}</span>\n          </label>\n          {options.map(([text, value], index) => (\n            <label key={index} className=\"option\">\n              <input\n                type=\"checkbox\"\n                value={value}\n                checked={values.includes(value)}\n                onChange={select}\n              />\n              <span>{text}</span>\n            </label>\n          ))}\n        </div>\n      )}\n      offsetY={2}\n    />\n  )\n    \n  function selectAll() {\n    if (mustSelectAll) {\n      values = options.map(option => option[1])\n    } else {\n      values = []\n    }\n\n    if (onChange) onChange(values)\n  }\n\n  function select(e) {\n    let value = e.target.value\n\n    if (values.includes(value)) {\n      values = values.filter(val => val !== value)\n    } else {\n      values.push(value)\n    }\n\n    if (onChange) onChange([...values])\n  }\n}`,\n    jsx: <MultiSelect\n      values={values}\n      onChange={setValues}\n      options={[\n        [`${translate(\"option\")} 1`, \"1\"],\n        [`${translate(\"option\")} 2`, \"2\"],\n        [`${translate(\"option\")} 3`, \"3\"],\n        [`${translate(\"option\")} 4`, \"4\"],\n        [`${translate(\"option\")} 5`, \"5\"]\n      ]}\n      translate={translate}\n    />\n  }\n\n  const handleClickOutside = {\n    title: \"Handle Click Outside\",\n    description: \"handle_click_outside\",\n    code: `useEffect(() => {\n  function handleClickOutside(e) {\n    if (ref.current && !ref.current.contains(e.target)) {\n      setIsMenuOpen(false)\n    }\n  }\n  \n  document.addEventListener(\"click\", handleClickOutside)\n  return () => document.removeEventListener(\"click\", handleClickOutside)\n}, [])`,\n    jsx: <MultiSelect\n      values={values1}\n      onChange={setValues1}\n      options={[\n        [`${translate(\"option\")} 1`, \"1\"],\n        [`${translate(\"option\")} 2`, \"2\"],\n        [`${translate(\"option\")} 3`, \"3\"],\n        [`${translate(\"option\")} 4`, \"4\"],\n        [`${translate(\"option\")} 5`, \"5\"],\n      ]}\n      useClickOutside\n      translate={translate}\n    />\n  }\n\n  return [\n    multiSelect,\n    handleClickOutside\n  ]\n}\n\nfunction MultiSelect({ options = [], values = [], onChange, useClickOutside = false, translate }) {\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\n  const ref = useRef()\n\n  useEffect(() => {\n    if (!useClickOutside) return\n\n    function handleClickOutside(e) {\n      if (ref.current && !ref.current.contains(e.target)) {\n        setIsMenuOpen(false)\n      }\n    }\n\n    document.addEventListener(\"click\", handleClickOutside)\n    return () => document.removeEventListener(\"click\", handleClickOutside)\n  }, [useClickOutside])\n\n  const mustSelectAll = values.length !== options.length\n\n  return (\n    <ElementPopper\n      ref={ref}\n      containerClassName=\"multi-select\"\n      element={(\n        <div\n          className=\"placeholder\"\n          onClick={() => setIsMenuOpen(!isMenuOpen)}\n        >\n          {translate(\"click here to select\")}\n        </div>\n      )}\n      popper={isMenuOpen && (\n        <div className=\"options\" style={{ width: ref?.current?.clientWidth || \"100px\" }}>\n          <label className=\"option\">\n            <input\n              type=\"checkbox\"\n              checked={!mustSelectAll}\n              onChange={selectAll}\n            />\n            <span>{translate(\"select all\")}</span>\n          </label>\n          {options.map(([text, value], index) => (\n            <label className=\"option\" key={index}>\n              <input\n                type=\"checkbox\"\n                value={value}\n                checked={values.includes(value)}\n                onChange={select}\n              />\n              <span>{text}</span>\n            </label>\n          ))}\n        </div>\n      )}\n      offsetY={2}\n    />\n  )\n\n  function selectAll() {\n    if (mustSelectAll) {\n      values = options.map(option => option[1])\n    } else {\n      values = []\n    }\n\n    if (onChange) onChange(values)\n  }\n\n  function select(e) {\n    let value = e.target.value\n\n    if (values.includes(value)) {\n      values = values.filter(val => val !== value)\n    } else {\n      values.push(value)\n    }\n\n    if (onChange) onChange([...values])\n  }\n}\n","import React from \"react\"\nimport Layout from \"../components/layout/layout\"\nimport doc from \"../docs/multi_select\"\n\nexport default function MultiSelect({ pageContext }) {\n  const language = pageContext.language || \"en\"\n\n  return (\n    <Layout language={language} doc={doc} />\n  )\n}"],"sourceRoot":""}