(self.webpackChunkreact_element_popper=self.webpackChunkreact_element_popper||[]).push([[241],{7731:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return a}});var r=t(7294),o=t(591),i=t(1006);function l(e){var n=(0,r.useRef)(),t=(0,r.useState)(!1),o=t[0],l=t[1],a=(0,r.useState)(!1),p=a[0],c=a[1],m={element:r.createElement(s,{size:80,backgroundColor:"red",translate:e},"Refrence Element"),popper:r.createElement(s,{size:100,backgroundColor:"white",translate:e},"Popper Element"),position:"bottom",fixMainPosition:!0,popperShadow:!0,arrow:!0};return[{title:"Refreshing Position",description:"refresh_position",code:'import React, { useState, useRef } from "react"\nimport ElementPopper from "react-element-popper"\nimport "react-element-popper/build/element_popper.css"\n\nexport default function App() {\n  const [visible, setVisible] = useState(false)\n  const [visible2, setVisible2] = useState(false)\n  const ref = useRef()\n\n  const globalProps = {\n    element: (\n      <Component \n        size={80}\n        backgroundColor="red"\n      >\n        Refrence Element\n      </Component>\n    ),\n    popper: (\n      <Component \n        size={100}\n        backgroundColor="white"\n      >\n        Popper Element\n      </Component>\n    ),\n    position: "bottom",\n    fixMainPosition: true,\n    popperShadow: true,\n    arrow: true\n  }\n\n  return (\n    <div>\n      <div style={{ marginBottom: "150px", padding: "0 10px" }}>\n        <h2>'+e("Example 1 (without using refresh position)")+" :</h2>\n        {visible && <span>"+e("a demo text to force the refrence element to move forward!")+'</span>}\n        <ElementPopper {...globalProps} />\n        <button\n          onClick={() => setVisible(!visible)}\n        >\n          {visible ? "'+e("refresh")+'" : "'+e("click here")+'"}\n        </button>\n      </div>\n    \n      <div style={{ marginBottom: "150px", padding: "0 10px" }}>\n        <h2>'+e("Example 2 (with using refresh position)")+" :</h2>\n        {visible2 && <span>"+e("a demo text to force the refrence element to move forward!")+'</span>}\n        <ElementPopper ref={ref} {...globalProps} />\n        <button\n          onClick={() => {\n            setVisible2(!visible2)\n          \n            ref.current.refreshPosition()\n          }}\n        >\n          {visible2 ? "'+e("refresh")+'" : "'+e("click here")+'"}\n        </button>\n      </div>\n    </div>\n  )\n}',jsx:r.createElement("div",null,r.createElement("div",{style:{marginBottom:"150px",padding:"0 10px"}},r.createElement("h2",null,e("Example 1 (without using refresh position)")," :"),o&&r.createElement("span",null,e("a demo text to force the refrence element to move forward!")),r.createElement(i.Z,m),r.createElement("button",{onClick:function(){return l(!o)}},e(o?"refresh":"click here"))),r.createElement("div",{style:{marginBottom:"150px",padding:"0 10px"}},r.createElement("h2",null,e("Example 2 (with using refresh position)")," :"),p&&r.createElement("span",null,e("a demo text to force the refrence element to move forward!")),r.createElement(i.Z,Object.assign({ref:n},m)),r.createElement("button",{onClick:function(){c(!p),n.current.refreshPosition()}},e(p?"refresh":"click here"))))}]}function s(e){var n=e.size,t=e.backgroundColor,o=e.children,i=e.translate;return r.createElement("div",{style:{width:n+"px",height:n+"px",backgroundColor:t,textAlign:"center",display:"flex",flexDirection:"column",justifyContent:"center",fontSize:"16px"}},i(o))}function a(e){var n=e.pageContext.language||"en";return r.createElement(o.Z,{language:n,doc:l})}}}]);
//# sourceMappingURL=component---src-pages-refresh-position-js-9b73c4a09868c6b08779.js.map