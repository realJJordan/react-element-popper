{"version":3,"sources":["webpack://react-element-popper/./src/docs/active_prop.js","webpack://react-element-popper/./src/pages/active-prop.js"],"names":["Doc","translate","language","useState","active","setActive","active1","setActive1","active2","setActive2","active3","setActive3","isPopperReady","setIsPopperReady","title","description","className","code","jsx","onClick","element","Component","height","width","backgroundColor","popper","position","AsyncComponent","AsyncComponent2","onReady","children","style","textAlign","display","flexDirection","justifyContent","fontSize","props","setProps","useEffect","state","setState","ready","ActiveProp","pageContext","doc"],"mappings":"+MAGe,SAASA,EAAIC,EAAWC,GAAW,IAAD,GACnBC,eAAS,GAA9BC,EADwC,KAChCC,EADgC,QAEjBF,eAAS,GAAhCG,EAFwC,KAE/BC,EAF+B,QAGjBJ,eAAS,GAAhCK,EAHwC,KAG/BC,EAH+B,QAIjBN,eAAS,GAAhCO,EAJwC,KAI/BC,EAJ+B,QAKLR,eAAS,GAA5CS,EALwC,KAKzBC,EALyB,KA4d/C,MAAO,CArdY,CACjBC,MAAO,cACPC,YACE,gCACE,yBAAId,EAAU,kBAEd,2BACE,wBAAMe,UAAU,gBAAhB,gIAUF,yBAAIf,EAAU,kBAEd,2BACE,wBAAMe,UAAU,gBAAhB,+lBAkCF,yBAAIf,EAAU,kBACd,yBAAIA,EAAU,oBAKC,CACnBa,MAAO,gBACPC,YAAa,gBACbE,KAAK,8oBA6BChB,EAAU,kBA7BZ,kfAmDyB,OAAbC,EAAoB,QAAU,QAnD1C,+BAwDJgB,IACE,gCACE,0BAAQC,QAAS,kBAAMd,GAAWD,KAC/BH,EAAU,mBAEb,2BACA,gBAAC,IAAD,CACEmB,QACE,gBAACC,EAAD,CACEC,OAAQ,GACRC,MAAO,IACPC,gBAAgB,MAChBvB,UAAWA,GAJb,oBASFwB,OACErB,GACE,gBAACiB,EAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,gBAAgB,OAChBvB,UAAWA,GAJb,kBAUJyB,SAAuB,OAAbxB,EAAoB,QAAU,WAM1B,CACpBY,MAAO,iBACPI,IACE,gCACE,yBAAIjB,EAAU,mBACd,0BAAQkB,QAAS,kBAAMZ,GAAYD,KAChCL,EAAU,mBAEb,2BACA,gBAAC,IAAD,CACEmB,QACE,gBAACC,EAAD,CACEC,OAAQ,GACRC,MAAO,IACPC,gBAAgB,MAChBvB,UAAWA,GAJb,oBASFwB,OACEnB,GACE,gBAACqB,EAAD,CACEL,OAAQ,IACRC,MAAO,IACPC,gBAAgB,OAChBvB,UAAWA,GAJb,kBAUJyB,SAAuB,OAAbxB,EAAoB,QAAU,SAG1C,2BACE,wBAAMc,UAAU,gBAAhB,iuBAkCAf,EAAU,kBAlCV,4fAwDuB,OAAbC,EAAoB,QAAU,QAxDxC,iCAgEF,yBAAID,EAAU,qBACd,yBAAIA,EAAU,qBAEd,2BACE,wBAAMe,UAAU,gBAAhB,0LASAf,EAAU,kBATV,kfA+BuB,OAAbC,EAAoB,QAAU,QA/BxC,0DAwCF,0BAAQiB,QAAS,kBAAMV,GAAYD,KAChCP,EAAU,mBAEb,2BACA,gBAAC,IAAD,CACEmB,QACE,gBAACC,EAAD,CACEC,OAAQ,GACRC,MAAO,IACPC,gBAAgB,MAChBvB,UAAWA,GAJb,oBASFwB,OACE,gBAACE,EAAD,CACEL,OAAQ,IACRC,MAAO,IACPC,gBAAgB,OAChBvB,UAAWA,GAJb,kBASFyB,SAAuB,OAAbxB,EAAoB,QAAU,OACxCE,OAAQI,IAGV,yBAAIP,EAAU,uBAKC,CACnBa,MAAO,gBACPI,IACE,gCACE,yBAAIjB,EAAU,kBACd,yBAAIA,EAAU,oBAEd,2BACE,wBAAMe,UAAU,gBAAhB,qpCAmDAf,EAAU,kBAnDV,gjBA0EuB,OAAbC,EAAoB,QAAU,QA1ExC,iEAmFF,0BACEiB,QAAS,WACFT,GAGHC,GAAW,GACXE,GAAiB,IAHjBF,GAAW,KAOdV,EAAU,mBAEb,2BACA,gBAAC,IAAD,CACEmB,QACE,gBAACC,EAAD,CACEC,OAAQ,GACRC,MAAO,IACPC,gBAAgB,MAChBvB,UAAWA,GAJb,oBASFwB,OACEf,GACE,gBAACkB,EAAD,CACEN,OAAQ,IACRC,MAAO,IACPC,gBAAgB,OAChBvB,UAAWA,EACX4B,QAAS,WACPhB,GAAiB,KANrB,kBAaJa,SAAuB,OAAbxB,EAAoB,QAAU,OACxCE,OAAQQ,OASlB,SAASS,EAAT,GAA6E,IAAxDC,EAAuD,EAAvDA,OAAQC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,gBAAiBM,EAAuB,EAAvBA,SAAU7B,EAAa,EAAbA,UAC7D,OACE,uBACE8B,MAAO,CACLR,MAAOA,EAAQ,KACfD,OAAQA,EAAS,KACjBE,kBACAQ,UAAW,SACXC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,SAAU,SAGXnC,EAAU6B,IAKjB,SAASH,EAAT,GAMI,IALFL,EAKC,EALDA,OACAC,EAIC,EAJDA,MACAC,EAGC,EAHDA,gBACAM,EAEC,EAFDA,SACA7B,EACC,EADDA,UACC,GACyBE,gBAAnBkC,EADN,KACaC,EADb,KAiBD,OAdAC,gBAAU,WACRD,EAAS,CACPP,MAAO,CACLR,MAAOA,EAAQ,KACfD,OAAQA,EAAS,KACjBE,kBACAQ,UAAW,SACXC,QAAS,OACTC,cAAe,SACfC,eAAgB,cAGnB,CAACb,EAAQC,EAAOC,IAEZa,EAAQ,sBAASA,EAAQpC,EAAU6B,IAAmB,KAG/D,SAASF,EAAT,GAOI,IANFN,EAMC,EANDA,OACAC,EAKC,EALDA,MACAC,EAIC,EAJDA,gBACAM,EAGC,EAHDA,SACAD,EAEC,EAFDA,QACA5B,EACC,EADDA,UACC,GACyBE,cAAS,IAA5BqC,EADN,KACaC,EADb,KA0BD,OAvBAF,gBAAU,WACRE,EAAS,CACPJ,MAAO,CACLN,MAAO,CACLR,MAAOA,EAAQ,KACfD,OAAQA,EAAS,KACjBE,kBACAQ,UAAW,SACXC,QAAS,OACTC,cAAe,SACfC,eAAgB,WAGpBO,OAAO,MAER,CAACpB,EAAQC,EAAOC,KAEnBe,gBAAU,WACHC,EAAME,OAEXb,MACC,CAACW,EAAME,MAAOb,IAEVW,EAAME,MAAQ,sBAASF,EAAMH,MAAQpC,EAAU6B,IAAmB,KC5iB5D,SAASa,EAAT,GAAsC,IAC7CzC,EAD4C,EAAf0C,YACN1C,UAAY,KAEzC,OACE,gBAAC,IAAD,CAAQA,SAAUA,EAAU2C,IAAKA","file":"component---src-pages-active-prop-js-4acbf1fa333f4883dfaf.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ElementPopper from \"../../../src/index\";\r\n\r\nexport default function Doc(translate, language) {\r\n  const [active, setActive] = useState(false);\r\n  const [active1, setActive1] = useState(false);\r\n  const [active2, setActive2] = useState(false);\r\n  const [active3, setActive3] = useState(false);\r\n  const [isPopperReady, setIsPopperReady] = useState(false);\r\n\r\n  const activeProp = {\r\n    title: \"Active Prop\",\r\n    description: (\r\n      <>\r\n        <p>{translate(\"active_prop_1\")}</p>\r\n\r\n        <pre>\r\n          <code className=\"language-jsx\">\r\n            {`const [active, setActive] = useState(false)\r\n\r\n<ElementPopper\r\n  element={<Element />}\r\n  popper={active && <Popper />}\r\n/>`}\r\n          </code>\r\n        </pre>\r\n\r\n        <p>{translate(\"active_prop_2\")}</p>\r\n\r\n        <pre>\r\n          <code className=\"language-jsx\">\r\n            {`function AsyncPopper() {\r\n  const [element, setElement] = useState()\r\n          \r\n  useEffect(() => {\r\n    //async operation\r\n    setTimeout(() => {\r\n      setElement(\r\n        <div \r\n          style={{ \r\n            width: \"120px\", \r\n            height: \"120px\",\r\n            backgroundColor: \"white\" \r\n          }}\r\n        >\r\n          Popper Element\r\n        </div>\r\n      )\r\n    }, 200);\r\n  }, [])\r\n          \r\n  return element || <div>Loading ...</div>\r\n}\r\n\r\nconst [active, setActive] = useState(false)\r\n\r\n<ElementPopper\r\n  element={<Element />}\r\n  popper={<AsyncPopper />}\r\n  active={active}\r\n/>`}\r\n          </code>\r\n        </pre>\r\n\r\n        <p>{translate(\"active_prop_3\")}</p>\r\n        <p>{translate(\"active_prop_4\")}</p>\r\n      </>\r\n    ),\r\n  };\r\n\r\n  const firstExample = {\r\n    title: \"First Example\",\r\n    description: \"first_example\",\r\n    code: `import React, { useState } from \"react\"\r\nimport ElementPopper from \"react-element-popper\"\r\n\r\nfunction Component({ height, width, backgroundColor, children }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: width + \"px\",\r\n        height: height + \"px\",\r\n        backgroundColor,\r\n        textAlign: \"center\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\"\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function Example() {\r\n  const [active, setActive] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <button \r\n        onClick={() => setActive(!active)}\r\n      >\r\n        ${translate(\"toggle visible\")}\r\n      </button>\r\n      <br />\r\n      <ElementPopper\r\n        element={(\r\n          <Component\r\n            height={40}\r\n            width={120}\r\n            backgroundColor=\"red\"\r\n          >\r\n            Refrence Element\r\n          </Component>\r\n        )}\r\n        popper={active && (\r\n          <Component\r\n            height={120}\r\n            width={120}\r\n            backgroundColor=\"gray\"\r\n          >\r\n            Popper Element\r\n          </Component>\r\n        )}\r\n        position=\"${language === \"en\" ? \"right\" : \"left\"}\"\r\n      />\r\n    </>\r\n  )\r\n}`,\r\n    jsx: (\r\n      <>\r\n        <button onClick={() => setActive(!active)}>\r\n          {translate(\"toggle visible\")}\r\n        </button>\r\n        <br />\r\n        <ElementPopper\r\n          element={\r\n            <Component\r\n              height={40}\r\n              width={120}\r\n              backgroundColor=\"red\"\r\n              translate={translate}\r\n            >\r\n              Refrence Element\r\n            </Component>\r\n          }\r\n          popper={\r\n            active && (\r\n              <Component\r\n                height={120}\r\n                width={120}\r\n                backgroundColor=\"gray\"\r\n                translate={translate}\r\n              >\r\n                Popper Element\r\n              </Component>\r\n            )\r\n          }\r\n          position={language === \"en\" ? \"right\" : \"left\"}\r\n        />\r\n      </>\r\n    ),\r\n  };\r\n\r\n  const secondExample = {\r\n    title: \"Second Example\",\r\n    jsx: (\r\n      <>\r\n        <p>{translate(\"second_example\")}</p>\r\n        <button onClick={() => setActive1(!active1)}>\r\n          {translate(\"toggle visible\")}\r\n        </button>\r\n        <br />\r\n        <ElementPopper\r\n          element={\r\n            <Component\r\n              height={40}\r\n              width={120}\r\n              backgroundColor=\"red\"\r\n              translate={translate}\r\n            >\r\n              Refrence Element\r\n            </Component>\r\n          }\r\n          popper={\r\n            active1 && (\r\n              <AsyncComponent\r\n                height={120}\r\n                width={120}\r\n                backgroundColor=\"gray\"\r\n                translate={translate}\r\n              >\r\n                Popper Element\r\n              </AsyncComponent>\r\n            )\r\n          }\r\n          position={language === \"en\" ? \"right\" : \"left\"}\r\n        />\r\n\r\n        <pre>\r\n          <code className=\"language-jsx\">\r\n            {`function AsyncComponent({ height, width, backgroundColor, children }) {\r\n  const [props, setProps] = useState()\r\n          \r\n  useEffect(() => {\r\n    setProps({\r\n      style: {\r\n        width: width + \"px\",\r\n        height: height + \"px\",\r\n        backgroundColor,\r\n        textAlign: \"center\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\"\r\n      }\r\n    })\r\n  }, [height, width, backgroundColor])\r\n          \r\n  return props ?\r\n    <div {...props}>\r\n      {children}\r\n    </div>\r\n    :\r\n    null\r\n}\r\n\r\nexport default function Example() {\r\n  const [active, setActive] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <button \r\n        onClick={() => setActive(!active)}\r\n      >\r\n        ${translate(\"toggle visible\")}\r\n      </button>\r\n      <br />\r\n      <ElementPopper\r\n        element={(\r\n          <Component\r\n            height={40}\r\n            width={120}\r\n            backgroundColor=\"red\"\r\n          >\r\n            Refrence Element\r\n          </Component>\r\n        )}\r\n        popper={active && (\r\n          <AsyncComponent\r\n            height={120}\r\n            width={120}\r\n            backgroundColor=\"gray\"\r\n          >\r\n            Popper Element\r\n          </AsyncComponent>\r\n        )}\r\n        position=\"${language === \"en\" ? \"right\" : \"left\"}\"\r\n      />\r\n    </>\r\n  )\r\n}`}\r\n          </code>\r\n        </pre>\r\n\r\n        <p>{translate(\"second_example_1\")}</p>\r\n        <p>{translate(\"second_example_2\")}</p>\r\n\r\n        <pre>\r\n          <code className=\"language-jsx\">\r\n            {`export default function Example() {\r\n  const [active, setActive] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <button \r\n        onClick={() => setActive(!active)}\r\n      >\r\n        ${translate(\"toggle visible\")}\r\n      </button>\r\n      <br />\r\n      <ElementPopper\r\n        element={(\r\n          <Component\r\n            height={40}\r\n            width={120}\r\n            backgroundColor=\"red\"\r\n          >\r\n            Refrence Element\r\n          </Component>\r\n        )}\r\n        popper={(\r\n          <AsyncComponent\r\n            height={120}\r\n            width={120}\r\n            backgroundColor=\"gray\"\r\n          >\r\n            Popper Element\r\n          </AsyncComponent>\r\n        )}\r\n        position=\"${language === \"en\" ? \"right\" : \"left\"}\"\r\n        active={active}\r\n      />\r\n    </>\r\n  )\r\n}`}\r\n          </code>\r\n        </pre>\r\n\r\n        <button onClick={() => setActive2(!active2)}>\r\n          {translate(\"toggle visible\")}\r\n        </button>\r\n        <br />\r\n        <ElementPopper\r\n          element={\r\n            <Component\r\n              height={40}\r\n              width={120}\r\n              backgroundColor=\"red\"\r\n              translate={translate}\r\n            >\r\n              Refrence Element\r\n            </Component>\r\n          }\r\n          popper={\r\n            <AsyncComponent\r\n              height={120}\r\n              width={120}\r\n              backgroundColor=\"gray\"\r\n              translate={translate}\r\n            >\r\n              Popper Element\r\n            </AsyncComponent>\r\n          }\r\n          position={language === \"en\" ? \"right\" : \"left\"}\r\n          active={active2}\r\n        />\r\n\r\n        <p>{translate(\"second_example_3\")}</p>\r\n      </>\r\n    ),\r\n  };\r\n\r\n  const thirdExample = {\r\n    title: \"Third Example\",\r\n    jsx: (\r\n      <>\r\n        <p>{translate(\"third_example\")}</p>\r\n        <p>{translate(\"third_example_1\")}</p>\r\n\r\n        <pre>\r\n          <code className=\"language-jsx\">\r\n            {`function AsyncComponent({ height, width, backgroundColor, children, onReady }) {\r\n  const [state, setState] = useState({})\r\n            \r\n  useEffect(() => {\r\n    setState({\r\n      props: {\r\n        style: {\r\n          width: width + \"px\",\r\n          height: height + \"px\",\r\n          backgroundColor,\r\n          textAlign: \"center\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\"\r\n        }\r\n      },\r\n      ready: true\r\n    })\r\n  }, [height, width, backgroundColor])\r\n            \r\n  useEffect(() => {\r\n    if (!state.ready) return\r\n\r\n    onReady()\r\n  }, [state.ready, onReady])\r\n            \r\n  return state.ready ?\r\n    <div {...state.props}>\r\n      {children}\r\n    </div>\r\n    :\r\n    null\r\n}\r\n            \r\nexport default function Example() {\r\n  const [active, setActive] = useState(false)\r\n  const [isPopperReady, setIsPopperReady] = useState(false)\r\n            \r\n  return (\r\n    <>\r\n      <button \r\n        onClick={() => {\r\n          if (!active) {\r\n            setActive(true)\r\n          } else {\r\n            setActive(false)\r\n            setIsPopperReady(false)\r\n          }\r\n        }}\r\n      >\r\n        ${translate(\"toggle visible\")}\r\n      </button>\r\n      <br />\r\n      <ElementPopper\r\n        element={(\r\n          <Component\r\n            height={40}\r\n            width={120}\r\n            backgroundColor=\"red\"\r\n          >\r\n            Refrence Element\r\n          </Component>\r\n        )}\r\n        popper={active && (\r\n          <AsyncComponent\r\n            height={120}\r\n            width={120}\r\n            backgroundColor=\"gray\"\r\n            onReady={() => setIsPopperReady(true)}\r\n          >\r\n            Popper Element\r\n          </AsyncComponent>\r\n        )}\r\n        position=\"${language === \"en\" ? \"right\" : \"left\"}\"\r\n        active={isPopperReady}\r\n      />\r\n    </>\r\n  )\r\n}`}\r\n          </code>\r\n        </pre>\r\n\r\n        <button\r\n          onClick={() => {\r\n            if (!active3) {\r\n              setActive3(true);\r\n            } else {\r\n              setActive3(false);\r\n              setIsPopperReady(false);\r\n            }\r\n          }}\r\n        >\r\n          {translate(\"toggle visible\")}\r\n        </button>\r\n        <br />\r\n        <ElementPopper\r\n          element={\r\n            <Component\r\n              height={40}\r\n              width={120}\r\n              backgroundColor=\"red\"\r\n              translate={translate}\r\n            >\r\n              Refrence Element\r\n            </Component>\r\n          }\r\n          popper={\r\n            active3 && (\r\n              <AsyncComponent2\r\n                height={120}\r\n                width={120}\r\n                backgroundColor=\"gray\"\r\n                translate={translate}\r\n                onReady={() => {\r\n                  setIsPopperReady(true);\r\n                }}\r\n              >\r\n                Popper Element\r\n              </AsyncComponent2>\r\n            )\r\n          }\r\n          position={language === \"en\" ? \"right\" : \"left\"}\r\n          active={isPopperReady}\r\n        />\r\n      </>\r\n    ),\r\n  };\r\n\r\n  return [activeProp, firstExample, secondExample, thirdExample];\r\n}\r\n\r\nfunction Component({ height, width, backgroundColor, children, translate }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: width + \"px\",\r\n        height: height + \"px\",\r\n        backgroundColor,\r\n        textAlign: \"center\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        fontSize: \"16px\",\r\n      }}\r\n    >\r\n      {translate(children)}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction AsyncComponent({\r\n  height,\r\n  width,\r\n  backgroundColor,\r\n  children,\r\n  translate,\r\n}) {\r\n  const [props, setProps] = useState();\r\n\r\n  useEffect(() => {\r\n    setProps({\r\n      style: {\r\n        width: width + \"px\",\r\n        height: height + \"px\",\r\n        backgroundColor,\r\n        textAlign: \"center\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n      },\r\n    });\r\n  }, [height, width, backgroundColor]);\r\n\r\n  return props ? <div {...props}>{translate(children)}</div> : null;\r\n}\r\n\r\nfunction AsyncComponent2({\r\n  height,\r\n  width,\r\n  backgroundColor,\r\n  children,\r\n  onReady,\r\n  translate,\r\n}) {\r\n  const [state, setState] = useState({});\r\n\r\n  useEffect(() => {\r\n    setState({\r\n      props: {\r\n        style: {\r\n          width: width + \"px\",\r\n          height: height + \"px\",\r\n          backgroundColor,\r\n          textAlign: \"center\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n        },\r\n      },\r\n      ready: true,\r\n    });\r\n  }, [height, width, backgroundColor]);\r\n\r\n  useEffect(() => {\r\n    if (!state.ready) return;\r\n\r\n    onReady();\r\n  }, [state.ready, onReady]);\r\n\r\n  return state.ready ? <div {...state.props}>{translate(children)}</div> : null;\r\n}\r\n","import React from \"react\"\r\nimport Layout from \"../components/layout/layout\"\r\nimport doc from \"../docs/active_prop\"\r\n\r\nexport default function ActiveProp({ pageContext }) {\r\n  const language = pageContext.language || \"en\"\r\n\r\n  return (\r\n    <Layout language={language} doc={doc} />\r\n  )\r\n}"],"sourceRoot":""}