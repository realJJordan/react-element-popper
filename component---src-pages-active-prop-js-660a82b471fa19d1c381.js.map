{"version":3,"sources":["webpack://react-element-popper/./src/docs/active_prop.js","webpack://react-element-popper/./src/pages/active-prop.js"],"names":["translate","language","useState","active","setActive","active1","setActive1","active2","setActive2","active3","setActive3","isPopperReady","setIsPopperReady","title","description","className","code","jsx","onClick","element","Component","height","width","backgroundColor","popper","position","AsyncComponent","AsyncComponent2","onReady","children","style","textAlign","display","flexDirection","justifyContent","fontSize","props","setProps","useEffect","state","setState","ready","ActiveProp","pageContext","doc"],"mappings":"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","file":"component---src-pages-active-prop-js-660a82b471fa19d1c381.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport ElementPopper from \"../../../index\"\n\nexport default function (translate, language) {\n  const [active, setActive] = useState(false)\n  const [active1, setActive1] = useState(false)\n  const [active2, setActive2] = useState(false)\n  const [active3, setActive3] = useState(false)\n  const [isPopperReady, setIsPopperReady] = useState(false)\n\n  const activeProp = {\n    title: \"Active Prop\",\n    description: <>\n      <p>{translate(\"active_prop_1\")}</p>\n\n      <pre>\n        <code className=\"language-jsx\">\n          {\n            `const [active, setActive] = useState(false)\n\n<ElementPopper\n  element={<Element />}\n  popper={active && <Popper />}\n/>`\n          }\n        </code>\n      </pre>\n\n      <p>{translate(\"active_prop_2\")}</p>\n\n      <pre>\n        <code className=\"language-jsx\">\n          {\n            `function AsyncPopper() {\n  const [element, setElement] = useState()\n          \n  useEffect(() => {\n    //async operation\n    setTimeout(() => {\n      setElement(\n        <div \n          style={{ \n            width: \"120px\", \n            height: \"120px\",\n            backgroundColor: \"white\" \n          }}\n        >\n          Popper Element\n        </div>\n      )\n    }, 200);\n  }, [])\n          \n  return element || <div>Loading ...</div>\n}\n\nconst [active, setActive] = useState(false)\n\n<ElementPopper\n  element={<Element />}\n  popper={<AsyncPopper />}\n  active={active}\n/>`\n          }\n        </code>\n      </pre>\n\n      <p>{translate(\"active_prop_3\")}</p>\n      <p>{translate(\"active_prop_4\")}</p>\n    </>\n  }\n\n  const firstExample = {\n    title: \"First Example\",\n    description: \"first_example\",\n    code: `import React, { useState } from \"react\"\nimport ElementPopper from \"react-element-popper\"\n\nfunction Component({ height, width, backgroundColor, children }) {\n  return (\n    <div\n      style={{\n        width: width + \"px\",\n        height: height + \"px\",\n        backgroundColor,\n        textAlign: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\"\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default function Example() {\n  const [active, setActive] = useState(false)\n\n  return (\n    <>\n      <button \n        onClick={() => setActive(!active)}\n      >\n        ${translate(\"toggle visible\")}\n      </button>\n      <br />\n      <ElementPopper\n        element={(\n          <Component\n            height={40}\n            width={120}\n            backgroundColor=\"red\"\n          >\n            Refrence Element\n          </Component>\n        )}\n        popper={active && (\n          <Component\n            height={120}\n            width={120}\n            backgroundColor=\"gray\"\n          >\n            Popper Element\n          </Component>\n        )}\n        position=\"${language === \"en\" ? \"right\" : \"left\"}\"\n      />\n    </>\n  )\n}`,\n    jsx: <>\n      <button onClick={() => setActive(!active)}>{translate(\"toggle visible\")}</button>\n      <br />\n      <ElementPopper\n        element={(\n          <Component\n            height={40}\n            width={120}\n            backgroundColor=\"red\"\n            translate={translate}\n          >\n            Refrence Element\n          </Component>\n        )}\n        popper={active && (\n          <Component\n            height={120}\n            width={120}\n            backgroundColor=\"gray\"\n            translate={translate}\n          >\n            Popper Element\n          </Component>\n        )}\n        position={language === \"en\" ? \"right\" : \"left\"}\n      />\n    </>\n  }\n\n  const secondExample = {\n    title: \"Second Example\",\n    jsx: <>\n      <p>{translate(\"second_example\")}</p>\n      <button onClick={() => setActive1(!active1)}>{translate(\"toggle visible\")}</button>\n      <br />\n      <ElementPopper\n        element={(\n          <Component\n            height={40}\n            width={120}\n            backgroundColor=\"red\"\n            translate={translate}\n          >\n            Refrence Element\n          </Component>\n        )}\n        popper={active1 && (\n          <AsyncComponent\n            height={120}\n            width={120}\n            backgroundColor=\"gray\"\n            translate={translate}\n          >\n            Popper Element\n          </AsyncComponent>\n        )}\n        position={language === \"en\" ? \"right\" : \"left\"}\n      />\n\n      <pre>\n        <code className=\"language-jsx\">\n          {\n            `function AsyncComponent({ height, width, backgroundColor, children }) {\n  const [props, setProps] = useState()\n          \n  useEffect(() => {\n    setProps({\n      style: {\n        width: width + \"px\",\n        height: height + \"px\",\n        backgroundColor,\n        textAlign: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\"\n      }\n    })\n  }, [height, width, backgroundColor])\n          \n  return props ?\n    <div {...props}>\n      {children}\n    </div>\n    :\n    null\n}\n\nexport default function Example() {\n  const [active, setActive] = useState(false)\n\n  return (\n    <>\n      <button \n        onClick={() => setActive(!active)}\n      >\n        ${translate(\"toggle visible\")}\n      </button>\n      <br />\n      <ElementPopper\n        element={(\n          <Component\n            height={40}\n            width={120}\n            backgroundColor=\"red\"\n          >\n            Refrence Element\n          </Component>\n        )}\n        popper={active && (\n          <AsyncComponent\n            height={120}\n            width={120}\n            backgroundColor=\"gray\"\n          >\n            Popper Element\n          </AsyncComponent>\n        )}\n        position=\"${language === \"en\" ? \"right\" : \"left\"}\"\n      />\n    </>\n  )\n}`\n          }\n        </code>\n      </pre>\n\n      <p>{translate(\"second_example_1\")}</p>\n      <p>{translate(\"second_example_2\")}</p>\n\n      <pre>\n        <code className=\"language-jsx\">\n          {\n            `export default function Example() {\n  const [active, setActive] = useState(false)\n\n  return (\n    <>\n      <button \n        onClick={() => setActive(!active)}\n      >\n        ${translate(\"toggle visible\")}\n      </button>\n      <br />\n      <ElementPopper\n        element={(\n          <Component\n            height={40}\n            width={120}\n            backgroundColor=\"red\"\n          >\n            Refrence Element\n          </Component>\n        )}\n        popper={(\n          <AsyncComponent\n            height={120}\n            width={120}\n            backgroundColor=\"gray\"\n          >\n            Popper Element\n          </AsyncComponent>\n        )}\n        position=\"${language === \"en\" ? \"right\" : \"left\"}\"\n        active={active}\n      />\n    </>\n  )\n}`\n          }\n        </code>\n      </pre>\n\n      <button\n        onClick={() => setActive2(!active2)}\n      >\n        {translate(\"toggle visible\")}\n      </button>\n      <br />\n      <ElementPopper\n        element={(\n          <Component\n            height={40}\n            width={120}\n            backgroundColor=\"red\"\n            translate={translate}\n          >\n            Refrence Element\n          </Component>\n        )}\n        popper={(\n          <AsyncComponent\n            height={120}\n            width={120}\n            backgroundColor=\"gray\"\n            translate={translate}\n          >\n            Popper Element\n          </AsyncComponent>\n        )}\n        position={language === \"en\" ? \"right\" : \"left\"}\n        active={active2}\n      />\n\n      <p>{translate(\"second_example_3\")}</p>\n    </>\n  }\n\n  const thirdExample = {\n    title: \"Third Example\",\n    jsx: <>\n      <p>{translate(\"third_example\")}</p>\n      <p>{translate(\"third_example_1\")}</p>\n\n      <pre>\n        <code className=\"language-jsx\">\n          {\n            `function AsyncComponent({ height, width, backgroundColor, children, onReady }) {\n  const [state, setState] = useState({})\n            \n  useEffect(() => {\n    setState({\n      props: {\n        style: {\n          width: width + \"px\",\n          height: height + \"px\",\n          backgroundColor,\n          textAlign: \"center\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\"\n        }\n      },\n      ready: true\n    })\n  }, [height, width, backgroundColor])\n            \n  useEffect(() => {\n    if (!state.ready) return\n\n    onReady()\n  }, [state.ready, onReady])\n            \n  return state.ready ?\n    <div {...state.props}>\n      {children}\n    </div>\n    :\n    null\n}\n            \nexport default function Example() {\n  const [active, setActive] = useState(false)\n  const [isPopperReady, setIsPopperReady] = useState(false)\n            \n  return (\n    <>\n      <button \n        onClick={() => {\n          if (!active) {\n            setActive(true)\n          } else {\n            setActive(false)\n            setIsPopperReady(false)\n          }\n        }}\n      >\n        ${translate(\"toggle visible\")}\n      </button>\n      <br />\n      <ElementPopper\n        element={(\n          <Component\n            height={40}\n            width={120}\n            backgroundColor=\"red\"\n          >\n            Refrence Element\n          </Component>\n        )}\n        popper={active && (\n          <AsyncComponent\n            height={120}\n            width={120}\n            backgroundColor=\"gray\"\n            onReady={() => setIsPopperReady(true)}\n          >\n            Popper Element\n          </AsyncComponent>\n        )}\n        position=\"${language === \"en\" ? \"right\" : \"left\"}\"\n        active={isPopperReady}\n      />\n    </>\n  )\n}`\n          }\n        </code>\n      </pre>\n\n      <button\n        onClick={() => {\n          if (!active3) {\n            setActive3(true)\n          } else {\n            setActive3(false)\n            setIsPopperReady(false)\n          }\n        }}\n      >\n        {translate(\"toggle visible\")}\n      </button>\n      <br />\n      <ElementPopper\n        element={(\n          <Component\n            height={40}\n            width={120}\n            backgroundColor=\"red\"\n            translate={translate}\n          >\n            Refrence Element\n          </Component>\n        )}\n        popper={active3 && (\n          <AsyncComponent2\n            height={120}\n            width={120}\n            backgroundColor=\"gray\"\n            translate={translate}\n            onReady={() => {\n              setIsPopperReady(true)\n            }}\n          >\n            Popper Element\n          </AsyncComponent2>\n        )}\n        position={language === \"en\" ? \"right\" : \"left\"}\n        active={isPopperReady}\n      />\n    </>\n  }\n\n  return [\n    activeProp,\n    firstExample,\n    secondExample,\n    thirdExample\n  ]\n}\n\nfunction Component({ height, width, backgroundColor, children, translate }) {\n  return (\n    <div\n      style={{\n        width: width + \"px\",\n        height: height + \"px\",\n        backgroundColor,\n        textAlign: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        fontSize: \"16px\"\n      }}\n    >\n      {translate(children)}\n    </div>\n  )\n}\n\nfunction AsyncComponent({ height, width, backgroundColor, children, translate }) {\n  const [props, setProps] = useState()\n\n  useEffect(() => {\n    setProps({\n      style: {\n        width: width + \"px\",\n        height: height + \"px\",\n        backgroundColor,\n        textAlign: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\"\n      }\n    })\n  }, [height, width, backgroundColor])\n\n  return props ?\n    <div {...props}>\n      {translate(children)}\n    </div>\n    :\n    null\n}\n\nfunction AsyncComponent2({ height, width, backgroundColor, children, onReady, translate }) {\n  const [state, setState] = useState({})\n\n  useEffect(() => {\n    setState({\n      props: {\n        style: {\n          width: width + \"px\",\n          height: height + \"px\",\n          backgroundColor,\n          textAlign: \"center\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\"\n        }\n      },\n      ready: true\n    })\n  }, [height, width, backgroundColor])\n\n  useEffect(() => {\n    if (!state.ready) return\n\n    onReady()\n  }, [state.ready, onReady])\n\n  return state.ready ?\n    <div {...state.props}>\n      {translate(children)}\n    </div>\n    :\n    null\n}","import React from \"react\"\nimport Layout from \"../components/layout/layout\"\nimport doc from \"../docs/active_prop\"\n\nexport default function ActiveProp({ pageContext }) {\n  const language = pageContext.language || \"en\"\n\n  return (\n    <Layout language={language} doc={doc} />\n  )\n}"],"sourceRoot":""}